from __future__ import print_function

print('Loading function')
from StringIO import StringIO
from uuid import UUID
import psycopg2
import psycopg2.extras
import csv, datetime, os, smtplib, boto3
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage
from email.MIMEBase import MIMEBase
from email import Encoders

s3 = boto3.resource('s3')


class Mailer(object):

    def mail(self, text, attach):
        to_mail_id = os.environ['to_mail_id'].split(",")
        from_mail_id = os.environ['from_mail_id']
        from_mail_id_password = os.environ['from_mail_id_password']
        msg = MIMEMultipart()
        msg['From'] = from_mail_id
        # msg['To'] = to_mail_id
        msg['Subject'] = os.environ['subject']

        msg.attach(MIMEText(text))

        # get all the attachments
        for file in attach:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(open(file, 'rb').read())
            Encoders.encode_base64(part)
            part.add_header('Content-Disposition', 'attachment; filename="%s"' % file)
            msg.attach(part)

        mailServer = smtplib.SMTP("smtp.gmail.com", 587)
        mailServer.ehlo()
        mailServer.starttls()
        mailServer.ehlo()
        mailServer.login(from_mail_id, from_mail_id_password)
        mailServer.sendmail(from_mail_id, to_mail_id, msg.as_string())
        mailServer.close()


class DataBaseConnection(object):
    def __init__(self):
        db_connection_string = os.environ["db_connection_string"]
        self.db_connection = psycopg2.connect(db_connection_string)
        self.cur = self.db_connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor)

    def select_query(self, query):
        try:
            self.cur.execute(query)
            data = self.cur.fetchall()
            # db.close()
            return data
        except (Exception, psycopg2.DatabaseError) as e:
            raise Exception(e)

    def update_query(self, query):
        try:
            self.cur.execute(query)
            self.db_connection.commit()
            updated_rows = self.cur.rowcount
            return updated_rows

        except Exception as e:
            return str(e)

    def __del__(self):
        self.db_connection.close()


class UpdateData(DataBaseConnection, Mailer):

    def validate_uuid(self, uuid_string):
        try:
            UUID(uuid_string, version=4)
            return True
        except ValueError:

            return False

    def update_data(self, data, f_name):
        print("Inside helper")
        positive = []
        negative = []

        for index, i in enumerate(data):
            if i.get("fk_item_master_uid"):
                if index < 1:
                    all_headers = i.keys()
                    all_headers.append("response")
                    positive.append(all_headers)
                    negative.append(all_headers)

                temp = i.values()
                if (not self.validate_uuid(i.get("fk_item_master_uid"))):
                    self.mail("Hi I am Hodor. Breaking operation, malform uuid detected " + str(
                        i.get("fk_item_master_uid")) + " ", [])
                    return "Breaking Operation";
                sql = "select id from item_master where item_uid = '{}'".format(i.get("fk_item_master_uid"))

                try:
                    mdm_data = self.select_query(sql)

                    if (len(mdm_data) > 0):
                        distributor_item_code = i.get("distributor_item_code")
                        fk_distributor_master_id = i.get("distributor_id")
                        fk_item_master_uid = i.get("fk_item_master_uid")
                        is_active = True if (int(i.get("is_active"))==1) else False
                        is_duplicate = True if (int(i.get("is_duplicate"))==1) else False

                        sql = "select id from distributor_item_master where fk_distributor_master_id = {fk_distributor_master_id} and distributor_item_code = '{distributor_item_code}'".format(
                            fk_distributor_master_id=fk_distributor_master_id,
                            distributor_item_code=distributor_item_code)

                        dim_data = self.select_query(sql)

                        if (len(dim_data) > 0):

                            sql = """insert into item_distributor_mapping (fk_item_master_uid,is_active,created_on,updated_on,
                                                                                          fk_distributor_master_id,distributor_item_code,is_duplicate)
                                                    values ('{fk_item_master_uid}',{is_active},now(),now(),{fk_distributor_master_id},'{distributor_item_code}',{is_duplicate})
                                                    on conflict(distributor_item_code,fk_distributor_master_id) do update set fk_item_master_uid='{fk_item_master_uid}'
                                                    ,is_active={is_active},updated_on=now(),is_duplicate={is_duplicate}""".format(
                                fk_item_master_uid=fk_item_master_uid,
                                is_active=is_active,
                                distributor_item_code=distributor_item_code,
                                fk_distributor_master_id=fk_distributor_master_id,
                                is_duplicate=is_duplicate);
                            update_status = self.update_query(sql)
                            # data[0].keys()
                            # print(i["is_x4"])
                            #  
                            if "is_x4" in data[0].keys() and i.get("is_x4")=='1' :
                                # and i.get("is_x4")==1
                                # print('inside_x4')
                                # print(i)
                                # print(i["is_x4"])
                                sql2="""update pseudo_idm 
                                        set is_verified=true
                                        from 
                                        item_distributor_mapping  
                                        where  item_distributor_mapping.fk_distributor_master_id={fk_distributor_master_id}
                                         and item_distributor_mapping.distributor_item_code='{distributor_item_code}'
                                        and item_distributor_mapping.id=pseudo_idm.idm_id """.format(
                                    distributor_item_code=distributor_item_code,
                                    fk_distributor_master_id=fk_distributor_master_id);
                                update_status = self.update_query(sql2)
                                temp.append("Updated Sucessfully using X4")
                                positive.append(temp)
                            else:
                                temp.append("Updated Sucessfully")
                                positive.append(temp)
                        else:
                            temp.append("Data Not Available In Distributor Item Master Table")
                            negative.append(temp)

                    else:

                        temp.append("Uuid Not available in Item Master")
                        negative.append(temp)
                except Exception as e:
                    print(e, "error")

        f_name = f_name.split("/")[-1].replace(".csv", "")

        positive_file_name = "/tmp/" + f_name + "_positive.csv"
        negative_file_name = "/tmp/" + f_name + "_negative.csv"

        myFile = open(positive_file_name, 'w')
        with myFile:
            writer = csv.writer(myFile)
            writer.writerows(positive)

        myFile = open(negative_file_name, 'w')
        with myFile:
            writer = csv.writer(myFile)
            writer.writerows(negative)

        bucketName = 'temp-test-ahwspl'
        sub_bucket = str(datetime.datetime.now())

        Key1 = '{}/{}'.format(sub_bucket, positive_file_name)
        s3 = boto3.client('s3')
        s3.put_object(Bucket=bucketName, Key=Key1)

        Key = '{}/{}'.format(sub_bucket, negative_file_name)
        s3 = boto3.client('s3')
        s3.put_object(Bucket=bucketName, Key=Key)

        self.mail("Hi I am Hodor. Please find upload results from attachment :)",
                  [positive_file_name, negative_file_name])
        os.remove(positive_file_name)
        os.remove(negative_file_name)
        return "FInished"


def get_key_data(file_name):
    bucket = s3.Bucket('mdm-auto-upload')
    obj = bucket.Object(key=file_name)
    data = obj.get()['Body'].read()
    f = StringIO(data)
    reader = csv.reader(f, delimiter=',')
    final_data = []
    header = None
    for index, record in enumerate(reader):
        if index == 0:
            header = record
        else:
            final_data.append(
                {header[index]: value if (len(value) > 0) else None for index, value in enumerate(record)})
    return final_data


def lambda_handler(event, context):
    if event:
        print("started...........")
        file_object = event["Records"][0]
        filename = file_object['s3']['object']['key']
        uploaded_data = get_key_data(filename)
        UpdateData().update_data(uploaded_data, filename)
        print("Working")
    else:
        print("no event")
